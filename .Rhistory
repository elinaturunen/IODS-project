math <- read.table("student-mat.csv", sep = ";" , header=TRUE)
str(math)
dim(math)
por <- read.table("student-por.csv", sep = ";" , header=TRUE)
str(por)
dim(por)
library(dplyr
library(dplyr)
library(dplyr)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
colnames(math_por)
glimpse(math_por)
alc <- select(math_por, one_of(join_by))
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
glimpse(alc)
library(ggplot2)
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
alc <- mutate(alc, high_use = alc_use > 2)
glimpse(alc)
write.csv(alc, file = "alc.csv")
read.table("alc.csv", sep = ";", header=TRUE)
colnames(alc)
library(tidyr); library(dplyr); library(ggplot2)
install(tidyr)
install.packages("tidyr")
library(tidyr)
ggplot(aes(absences)) + geom_bar() + facet_wrap("key", scales = "free")
g1 <- ggplot(alc, aes(x = absences, y = high_use))
g2 + geom_boxplot() + ylab("high_use")
g1 + geom_boxplot() + ylab("high_use")
p1 <- ggplot(alc, aes(x = absences, y = high_use))
p2 <- p1 + geom_point(aes("points"))
p2
p <- ggpairs(alc, mapping = aes(), lower = list(combo = wrap("facethist", bins = 20)))
library(GGally)
p <- ggpairs(alc, mapping = aes(), lower = list(combo = wrap("facethist", bins = 20)))
p
p <- ggpairs(alc, mapping = aes("absences", "schoolsup", "higher", "high_use"), lower = list(combo = wrap("facethist", bins = 20)))
g1 <- ggplot(data = alc, aes(x = high_use))
g1 + geom_bar(aes)
g1 + geom_bar(aes())
g1 <- ggplot(data = alc, aes(x = absences))
g1 + geom_bar(aes())
g1 <- ggplot(data = alc, aes(x = schoolsup))
g1 + geom_bar(aes())
g1 <- ggplot(data = alc, aes(x = higher))
g1 + geom_bar(aes())
![~/Desktop/IODS-project/absences_Rplot.png](path)
g1 <- ggplot(data = alc, aes(x = absences, y = high_use))
g1 + geom_bar(aes())
gather(alc$absences, alc$schoolsup, alc$higher, alc$high_use) %>% ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free")
gather(alc$absences; alc$schoolsup; alc$higher; alc$high_use) %>% ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free")
gather(alc$absences + alc$schoolsup + alc$higher + alc$high_use) %>% ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free")
g1 <- ggplot(alc, aes(x = absences, y = high_use))
g1 + geom_boxplot() + ylab("absences")
g1 <- ggplot(alc, aes(x = high_use, y = absences))
g1 + geom_boxplot() + ylab("absences")
g1 <- ggplot(alc, aes(x = high_use, y = schoolsup))
g1 + geom_boxplot() + ylab("school support")
g1 <- ggplot(alc, aes(x = high_use, y = higher))
g1 + geom_boxplot() + ylab("higher education")
g1 <- ggplot(alc, aes(x = schoolsup, y = high_use))
g1 + geom_boxplot() + ylab("school support")
g1 <- ggplot(data = alc, aes(x = high_use, y = absences))
g1 + geom_bar(aes())
g1 <- ggplot(data = alc, aes(x = high_use))
g1 + geom_bar(aes(y = absences))
g1 <- ggplot(alc, x = high_use, y = absences)
g1 + geom_bar(aes())
g1 <- ggplot(alc, x = high_use, y = absences)
g1 + geom_bar(aes(x = high_use))
g1 <- ggplot(alc, x = high_use, y = higher)
g1 + geom_bar(aes(x = high_use))
g1 <- ggplot(alc, x = high_use, y = school sup)
g1 <- ggplot(alc, x = high_use, y = schoolsup)
g1 + geom_bar(aes(x = high_use))
g1 <- ggplot(alc, x = schoolsup)
g1 + geom_bar(aes(fill = high_use))
g1 + geom_bar(aes(x = schoolsup, fill = high_use))
g1 <- ggplot(alc, x = higher)
g1 + geom_bar(aes(x = higher, fill = high_use))
m <- glm(high_use ~ absences + schoolsup + higher, data = alc, family = "binomial")
summary(m)
coef(m)
OR <- coef(m) %>% exp
CI <- confint(m) %>% exp
cbind(OR, CI)
library(dplyr)
m <- glm(high_use ~ absences, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = "probability")
table(high_use = alc$high_use, prediction = alc$prediction)
m <- glm(high_use ~ absences + schoolsup + higher, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = "probability")
table(high_use = alc$high_use, prediction = alc$prediction)
m <- glm(high_use ~ absences + schoolsup + higher, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = probability > 0.5)
table(high_use = alc$high_use, prediction = alc$prediction)
m <- glm(high_use ~ absences, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = probability > 0.5)
table(high_use = alc$high_use, prediction = alc$prediction)
library(dplyr); library(ggplot2)
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
g + geom_point()
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(class = alc$high_use, prob = alc$probability)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(alc$probability, alc$high_use)
library(boot)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = 10)
cv$delta[1]
![](~/Desktop/IODS-project/absences_Rplot.png)
!(~/Desktop/IODS-project/absences_Rplot.png)
!(~Desktop/IODS-project/absences_Rplot.png)
![absences](~/Desktop/IODS-project/absences_Rplot.png)
![caption](absences_Rplot.png)
library(MASS)
data("Boston")
str(Boston)
dim(Boston)
pairs(Boston)
summary(Boston)
cor_matrix <- cor(Boston) %>% round(2)
library(MASS)
cor_matrix <- cor(Boston) %>% round(2)
library(ggplot2)
library(GGally)
cor_matrix <- cor(Boston) %>% round(2)
library(dplyr)
cor_matrix <- cor(Boston) %>% round(2)
cor_matrix
corrplot(cor_matrix, method="circle")
install(corrplot)
install.packages(corrplot)
install.packages(corrplot_package)
library(corrplot)
install.packages("corrplot")
cor_matrix <- cor(Boston) %>% round(2)
cor_matrix
corrplot(cor_matrix, method="circle")
library(corrplot)
cor_matrix <- cor(Boston) %>% round(2)
cor_matrix
corrplot(cor_matrix, method="circle")
corrplot(cor_matrix, method="circle",  type = "upper")
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
summary(scaled_crim)
bins <- quantile(scaled_crim)
bins
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 3)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 3)
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
data("Boston")
boston_scaled <- scale(Boston)
summary(boston_scaled)
dist_eu <- dist(Boston, method = "euclidean")
summary(dist_eu)
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
pairs(Boston, col = km$cluster)
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
plot(1:k_max, twcss, type='b')
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster)
data("Boston")
boston_scaled <- scale(Boston)
boston_scaled <- as.data.frame(boston_scaled)
dist_eu <- dist(Boston, method = "euclidean")
summary(dist_eu)
km <-kmeans(dist_eu, centers = 4)
pairs(Boston, col = km$cluster)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
lda.fit <- lda(km$cluster ~ ., data = train)
lda.fit <- lda(km ~ ., data = train)
lda.fit <- lda(cluster ~ ., data = train)
lda.fit <- lda(km$cluster ~ ., data = Boston)
lda.fit
lda.fit <- lda(km$cluster ~ ., data = train)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(km$cluster)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 3)
