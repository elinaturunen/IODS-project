install.packages("corrplot")
cor_matrix <- cor(Boston) %>% round(2)
cor_matrix
corrplot(cor_matrix, method="circle")
library(corrplot)
cor_matrix <- cor(Boston) %>% round(2)
cor_matrix
corrplot(cor_matrix, method="circle")
corrplot(cor_matrix, method="circle",  type = "upper")
boston_scaled <- scale(Boston)
summary(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
scaled_crim <- boston_scaled$crim
summary(scaled_crim)
bins <- quantile(scaled_crim)
bins
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 3)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 3)
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
data("Boston")
boston_scaled <- scale(Boston)
summary(boston_scaled)
dist_eu <- dist(Boston, method = "euclidean")
summary(dist_eu)
set.seed(123)
km <-kmeans(dist_eu, centers = 4)
pairs(Boston, col = km$cluster)
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
plot(1:k_max, twcss, type='b')
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster)
data("Boston")
boston_scaled <- scale(Boston)
boston_scaled <- as.data.frame(boston_scaled)
dist_eu <- dist(Boston, method = "euclidean")
summary(dist_eu)
km <-kmeans(dist_eu, centers = 4)
pairs(Boston, col = km$cluster)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
lda.fit <- lda(km$cluster ~ ., data = train)
lda.fit <- lda(km ~ ., data = train)
lda.fit <- lda(cluster ~ ., data = train)
lda.fit <- lda(km$cluster ~ ., data = Boston)
lda.fit
lda.fit <- lda(km$cluster ~ ., data = train)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(km$cluster)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 3)
library(MASS)
data("Boston")
boston_scaled <- scale(Boston)
boston_scaled <- as.data.frame(boston_scaled)
dist_eu <- dist(boston_scaled, method = "euclidean")
summary(dist_eu)
km <-kmeans(dist_eu, centers = 4)
pairs(boston_scaled, col = km$cluster)
lda.fit <- lda(km$cluster ~ ., data = boston_scaled)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(km$cluster)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 3)
data("Boston")
pairs(Boston)
pairs(Boston, col = variable.names)
pairs(Boston, col = variables)
pairs(Boston, col = red)
pairs(Boston, col)
pairs(Boston, col = Boston$variable.names)
pairs(Boston, col = Boston$crim)
pairs(Boston, col = Boston$zn)
library(corrplot)
cor_matrix <- cor(Boston) %>% round(2)
library(dplyr)
library(GGally)
library(ggplot2)
cor_matrix <- cor(Boston) %>% round(2)
cor_matrix
corrplot(cor_matrix, method="circle",  type = "upper")
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
str(hd)
dim(hd)
summary(hd)
str(gii)
colnames(gii)
colnames(hd)
colnames(hd)[1] <- "hdirank"
colnames(hd)[2] <- "country"
colnames(hd)[3] <- "hdi"
colnames(hd)[4] <- "lifeexpbirth"
colnames(hd)[5] <- "expeduyears"
colnames(hd)[6] <- "meaneduyears"
colnames(hd)[7] <- "gnicapita"
colnames(hd)[8] <- "gnicapitarank_minus_hdirank"
colnames(gii)[1] <- "giirank"
colnames(gii)[2] <- "country"
colnames(gii)[3] <- "gii"
colnames(gii)[4] <- "maternalmortratio"
colnames(gii)[5] <- "adolbirth"
colnames(gii)[6] <- "parliamentF"
colnames(gii)[7] <- "edu2F"
colnames(gii)[8] <- "edu2M"
colnames(gii)[9] <- "labF"
colnames(gii)[10] <- "labM"
colnames(hd)
colnames(gii)
hd_gii <- mutate(hd_gii, edu2ratio = edu2F / edu2M)
gii <- mutate(hd_gii, edu2ratio = edu2F / edu2M)
gii <- mutate(gii, edu2ratio = edu2F / edu2M)
gii <- mutate(gii, labratio = labF / labM)
join_by <- c("country")
human <- inner_join(hd, gii, by = join_by)
colnames(human)
glimpse(human)
write.csv(human, file = "human.csv")
read.table("human.csv", sep = ";", header=TRUE)
model_predictors <- dplyr::select(train, -crime)
model_predictors <- dplyr::select(train, -train$crime)
model_predictors <- dplyr::select(train, -crime)
model_predictors <- dplyr::select(train, "-crime")
library(dplyr)
library(stringr)
read.table("human.csv", sep = ";", header=TRUE)
human$gnicapita <- as.numeric(human$gnicapita)
str(human)
keep <- c("country", "edu2ratio", "labratio", "eduexpyears", "lifeexpbirth", "gnicapita", "maternalmortratio", "adolbirth", "parliamentF")
human <- select(human, one_of(keep))
keep <- c("country", "edu2ratio", "labratio", "expeduyears", "lifeexpbirth", "gnicapita", "maternalmortratio", "adolbirth", "parliamentF")
human <- select(human, one_of(keep))
complete.cases(human)
data.frame(human[-1], comp = complete.cases(human))
human <- filter(human, complete.cases(human))
str(human)
tail(human, n = 10L)
read.table("human.csv", sep = ";", header=TRUE)
str(human)
library(dplyr)
library(stringr)
read.table("human.csv", sep = ";", header=TRUE)
str(human)
str(human$gnicapita)
str_replace(human$gnicapita, pattern=",", replace ="") %>% as.numeric(human$GNI)
str(human)
human <- human[1:195, ]
str(human)
str(human$gnicapita)
str_replace(human$gnicapita, pattern=",", replace ="") %>% as.numeric(human$GNI)
complete.cases(human)
data.frame(human[-1], comp = complete.cases(human))
human <- filter(human, complete.cases(human))
str(human)
human <- human[1:195, ]
str(human)
str(human$expeduyears)
tail(human, n = 10L)
last <- nrow(human) + 7
human <- human[1:last, ]
str(human)
str(human)
last <- nrow(human) - 7
human <- human[1:last, ]
str(human)
complete.cases(human)
library(dplyr)
library(stringr)
read.table("human.csv", sep = ";", header=TRUE)
str(human$gnicapita)
str_replace(human$gnicapita, pattern=",", replace ="") %>% as.numeric(human$GNI)
human$gnicapita <- str_replace(human$gnicapita, pattern=",", replace ="") %>% as.numeric(human$GNI)
read.table("human.csv", sep = ";", header=TRUE)
str(human$gnicapita)
View(por)
human <- read.table("human.csv", sep = ";", header=TRUE)
str(human$gnicapita)
human <- read.table("human.csv", sep = ",", header=TRUE)
str(human$gnicapita)
human$gnicapita <- str_replace(human$gnicapita, pattern=",", replace ="") %>% as.numeric(human$GNI)
keep <- c("country", "edu2ratio", "labratio", "expeduyears", "lifeexpbirth", "gnicapita", "maternalmortratio", "adolbirth", "parliamentF")
human <- select(human, one_of(keep))
library(dplyr)
library(stringr)
human <- read.table("human.csv", sep = ",", header=TRUE)
str(human$gnicapita)
str(human$gnicapita)
human$gnicapita <- str_replace(human$gnicapita, pattern=",", replace ="") %>% as.numeric(human$GNI)
keep <- c("country", "edu2ratio", "labratio", "expeduyears", "lifeexpbirth", "gnicapita", "maternalmortratio", "adolbirth", "parliamentF")
human <- select(human, one_of(keep))
complete.cases(human)
data.frame(human[-1], comp = complete.cases(human))
human <- filter(human, complete.cases(human))
tail(human, n = 10L)
last <- nrow(human) - 7
human <- human[1:last, ]
rownames(human) <- human$country
human <- select(human, -country)
str(human)
write.csv(human, file = "human.csv")
read.table("human.csv", sep = ",", header=TRUE)
human <- read.table("human.csv", sep = ",", header=TRUE)
str(human)
View(human)
str(gii)
human <- read.table("human.csv", sep = ",", header=TRUE)
str(human)
dim(human)
library(MASS)
pairs(human)
library(ggplot2)
g1 <- ggplot(human, aes())
g1 + geom_boxplot()
g1 <- ggplot(human, aes(x = edu2ratio))
g1 + geom_boxplot()
library(MASS); library(tidyr); library(dplyr);
library(MASS); library(tidyr); library(dplyr)
gather(human) %>% glimpse
gather(human) %>% ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free")
gather(human) %>% ggplot(aes(value)) + geom_density() + facet_wrap("key", scales = "free")
gather(human) %>% ggplot(aes(value)) + geom_histogram() + facet_wrap("key", scales = "free")
human <- read.table("human.csv", sep = ",", rownames=TRUE)
human <- read.table("human.csv", sep = ",", row.names=TRUE, header=TRUE)
write.csv(human, file = "human.csv", row.names=TRUE)
library(dplyr)
library(stringr)
# read data
human <- read.table("human.csv", sep = ",", header=TRUE)
# transform the Gross National Income (GNI) variable to numeric
# look at the structure of GNI column
str(human$gnicapita)
# remove the commas and print out a numeric version of it
human$gnicapita <- str_replace(human$gnicapita, pattern=",", replace ="") %>% as.numeric(human$GNI)
# select columns to keep
keep <- c("country", "edu2ratio", "labratio", "expeduyears", "lifeexpbirth", "gnicapita", "maternalmortratio", "adolbirth", "parliamentF")
# select the 'keep' columns
human <- select(human, one_of(keep))
# remove rows with missing values
# print out a completeness indicator
complete.cases(human)
# print out the data with a completeness indicator as the last column
data.frame(human[-1], comp = complete.cases(human))
# filter out rows with missing values
human <- filter(human, complete.cases(human))
# remove observations relating to regions
# look at the last 10 observations of human
tail(human, n = 10L)
# define the last indice we want to keep
last <- nrow(human) - 7
# choose everything until the last 7 observations
human <- human[1:last, ]
# define the row names of the data by the country names
rownames(human) <- human$country
# remove the country name column
human <- select(human, -country)
str(human)
# save the human data including the row names
write.csv(human, file = "human.csv", row.names=TRUE)
human <- read.table("human.csv", sep = ",", header=TRUE)
# Elina Turunen
# Exercise 4 (Data Wrangling) and 5
# Original data source: http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human1.txt
# Exercise 4: Data Wrangling
# read the “Human development” and “Gender inequality” datas
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# see the structure and dimensions of the data. Create summaries of the variables.
str(hd)
dim(hd)
summary(hd)
str(gii)
dim(gii)
summary(gii)
colnames(gii)
colnames(hd)
# rename the variables with (shorter) descriptive names
colnames(hd)[1] <- "hdirank"
colnames(hd)[2] <- "country"
colnames(hd)[3] <- "hdi"
colnames(hd)[4] <- "lifeexpbirth"
colnames(hd)[5] <- "expeduyears"
colnames(hd)[6] <- "meaneduyears"
colnames(hd)[7] <- "gnicapita"
colnames(hd)[8] <- "gnicapitarank_minus_hdirank"
colnames(gii)[1] <- "giirank"
colnames(gii)[2] <- "country"
colnames(gii)[3] <- "gii"
colnames(gii)[4] <- "maternalmortratio"
colnames(gii)[5] <- "adolbirth"
colnames(gii)[6] <- "parliamentF"
colnames(gii)[7] <- "edu2F"
colnames(gii)[8] <- "edu2M"
colnames(gii)[9] <- "labF"
colnames(gii)[10] <- "labM"
# print out the new column names of the data
colnames(hd)
colnames(gii)
# define new columns edu2ratio and labratio
gii <- mutate(gii, edu2ratio = edu2F / edu2M)
gii <- mutate(gii, labratio = labF / labM)
# common columns to use as identifiers
join_by <- c("country")
# join datasets by the selected identifiers
human <- inner_join(hd, gii, by = join_by)
# see column names
colnames(human)
# glimpse data
glimpse(human)
# save data to data folder
write.csv(human, file = "human1.csv")
human1 <- read.table("human1.csv", sep = ",", header=TRUE)
write.csv(human, file = "human1.csv", row.names=FALSE)
human1 <- read.table("human1.csv", sep = ",", header=TRUE)
str(human1)
human <- read.table("human1.csv", sep = ",", header=TRUE)
str(human)
# transform the Gross National Income (GNI) variable to numeric
# look at the structure of GNI column
str(human$gnicapita)
# remove the commas and print out a numeric version of it
human$gnicapita <- str_replace(human$gnicapita, pattern=",", replace ="") %>% as.numeric(human$GNI)
# select columns to keep
keep <- c("country", "edu2ratio", "labratio", "expeduyears", "lifeexpbirth", "gnicapita", "maternalmortratio", "adolbirth", "parliamentF")
# select the 'keep' columns
human <- select(human, one_of(keep))
# remove rows with missing values
# print out a completeness indicator
complete.cases(human)
# print out the data with a completeness indicator as the last column
data.frame(human[-1], comp = complete.cases(human))
# filter out rows with missing values
human <- filter(human, complete.cases(human))
# remove observations relating to regions
# look at the last 10 observations of human
tail(human, n = 10L)
# define the last indice we want to keep
last <- nrow(human) - 7
# choose everything until the last 7 observations
human <- human[1:last, ]
# define the row names of the data by the country names
rownames(human) <- human$country
# remove the country name column
human <- select(human, -country)
str(human)
write.csv(human, file = "human2.csv", row.names=TRUE)
human <- read.table("human2.csv", sep = ",", header=TRUE)
str(human)
row.names(human)
str(human)
str(human2)
human2 <- read.table("human2.csv", sep = ";", header=TRUE)
str(human2)
human2 <- read.table("human2.csv", sep = ",", header=TRUE)
str(human2)
rownames(human2)
rownames(human) <- human$country
rownames(human2) <- human2$country
rownames(human2)
human <- select(human, -country)
human2 <- select(human2, -country)
colnames(human2)
str(human2)
colnames(human2)[1] <- "country"
colnames(human2)
rownames(human2) <- human2$country
rownames(human2)
human2 <- select(human2, -country)
str(human2)
dim(human2)
library(MASS); library(tidyr); library(dplyr)
pairs(human)
p <- ggpairs(human2, mapping = aes(), lower = list(combo = wrap("facethist", bins = 20)))
library(MASS); library(tidyr); library(dplyr); library(ggplot2)
p <- ggpairs(human2, mapping = aes(), lower = list(combo = wrap("facethist", bins = 20)))
library(MASS); library(tidyr); library(dplyr); library(ggplot2); library(GGally)
p <- ggpairs(human2, mapping = aes(), lower = list(combo = wrap("facethist", bins = 20)))
p
ggpairs(human2)
gather(human2) %>% glimpse
gather(human2) %>% ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free")
gather(human2) %>% ggplot(aes(value)) + geom_histogram() + facet_wrap("key", scales = "free")
summary(human2)
pca_human2 <- prcomp(human2)
biplot(pca_human2, choices = 1:2)
human2_std <- scale(human2)
summary(human2_std)
pca_human2 <- prcomp(human2_std)
biplot(pca_human2, choices = 1:2)
biplot(pca_human2, choices = 1:2, cex = c(0.5, 2))
biplot(pca_human2, choices = 1:2, cex = c(0.5, 1.5))
pca_human2 <- prcomp(human2)
biplot(pca_human2, choices = 1:2, ggtitle("Principal components explaining variance in non-standardized human2 data"))
biplot(pca_human2, choices = 1:2) + ggtitle("Principal components explaining variance in non-standardized human2 data"))
biplot(pca_human2, choices = 1:2, title("Principal components explaining variance in non-standardized human2 data"))
biplot(pca_human2, choices = 1:2, title("Principal components explaining variance in non-standardized human2 data", cex = 1.5, font = 2))
biplot(pca_human2, choices = 1:2, title("Principal components explaining variance in non-standardized human2 data", cex = 0.5, font = 2))
biplot(pca_human2, choices = 1:2, title("Principal components explaining variance in non-standardized human2 data", cex = 0.5, font = 1))
biplot(pca_human2, choices = 1:2, title("Principal components explaining variance in non-standardized human2 data", cex = 0.5, font = 1))
biplot(pca_human2, choices = 1:2, title("Principal components explaining variance in non-standardized human2 data", cex = 0.5, font = 4))
biplot(pca_human2, choices = 1:2, title("Principal components explaining variance in non-standardized human2 data", cex = 0.5, font =0.5))
biplot(pca_human2, choices = 1:2, title("Principal components explaining variance in non-standardized human2 data", cex = 2.5, font =1.5))
biplot(pca_human2, choices = 1:2, title("Principal components explaining variance in non-standardized human2 data", cex = 0.2, font = 2))
biplot(pca_human2, choices = 1:2, subtitle("Principal components explaining variance in non-standardized human2 data", cex = 0.2, font = 2))
biplot(pca_human2, choices = 1:2, title(sub = "Principal components explaining variance in non-standardized human2 data", cex = 0.2, font = 2))
biplot(pca_human2, choices = 1:2, sub = "Principal components explaining variance in non-standardized human2 data", par(c(2, 0.2))
cex = 0.2, font = 2)
biplot(pca_human2, choices = 1:2, sub = "Principal components explaining variance in non-standardized human2 data")
biplot(pca_human2, choices = 1:2, cex = c(0.5, 1.5), sub = "Principal components explaining variance in non-standardized human2 data")
human2_std <- scale(human2)
summary(human2_std)
pca_human2 <- prcomp(human2_std)
biplot(pca_human2, choices = 1:2, cex = c(0.5, 1.5), sub = "Principal components explaining variance in standardized human2 data")
pca_human2 <- prcomp(human2)
biplot(pca_human2, choices = 1:2, cex = c(0.5, 1.5), sub = "Principal components explaining variance in non-standardized human2 data")
s <- summary(pca_human2)
s
library(scales)
pca_pr <- round(100*s$importance[2,], digits = 1)
pca_pr
pc_lab <- paste0(names(pca_pr), " (", pca_pr, "%)")
biplot(pca_human2, cex = c(0.5, 1.5), xlab = pc_lab[1], ylab = pc_lab[2], sub = "Principal components explaining variance in non-standardized human2 data")
human2_std <- scale(human2)
summary(human2_std)
pca_human2_std <- prcomp(human2_std)
biplot(pca_human2_std, choices = 1:2, cex = c(0.5, 1.5), sub = "Principal components explaining variance in standardized human2 data")
s_std <- summary(pca_human2_std)
s_std
pca_pr_std <- round(100*s_std$importance[2,], digits = 1)
pca_pr_std
pc_lab_std <- paste0(names(pca_pr_std), " (", pca_pr, "%)")
biplot(pca_human2, cex = c(0.5, 1.5), xlab = pc_lab_std[1], ylab = pc_lab_std[2], sub = "Principal components explaining variance in non-standardized human2 data")
biplot(pca_human2_std, cex = c(0.5, 1.5), xlab = pc_lab_std[1], ylab = pc_lab_std[2], sub = "Principal components explaining variance in non-standardized human2 data")
pca_human2 <- prcomp(human2)
biplot(pca_human2, choices = 1:2, cex = c(0.5, 1.5), sub = "Principal components explaining variance in non-standardized human2 data")
s <- summary(pca_human2)
s
pca_pr <- round(100*s$importance[2,], digits = 1)
pca_pr
pc_lab <- paste0(names(pca_pr), " (", pca_pr, "%)")
biplot(pca_human2, cex = c(0.5, 1.5), xlab = pc_lab[1], ylab = pc_lab[2], sub = "Principal components explaining variance in non-standardized human2 data")
human2_std <- scale(human2)
summary(human2_std)
pca_human2_std <- prcomp(human2_std)
s_std <- summary(pca_human2_std)
s_std
pca_pr_std <- round(100*s_std$importance[2,], digits = 1)
pca_pr_std
pc_lab_std <- paste0(names(pca_pr_std), " (", pca_pr_std, "%)")
biplot(pca_human2_std, cex = c(0.5, 1.5), xlab = pc_lab_std[1], ylab = pc_lab_std[2], sub = "Principal components explaining variance in non-standardized human2 data")
install.packages("FactoMineR")
library(FactoMineR)
read.csv(tea, sep = ",", header = TRUE)
read.table(tea, sep = "", header = FALSE)
load(tea, envir = parent.frame(), verbose = FALSE)
tea <- read.table(tea, sep = "", header = FALSE)
tea <-
data("tea")
data("tea")
str(tea)
gather(tea) %>% ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free")
gather(tea) %>% ggplot(aes(value), type = geom_bar(), theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))) + facet_wrap("key", scales = "free")
pairs(tea)
p <- ggpairs(tea, mapping = aes(), lower = list(combo = wrap("facethist", bins = 20)))
p
summary(tea)
mca <- MCA(tea, graph = FALSE)
summary(mca)
plot(tea, invisible=c("ind"), habillage = "quali")
